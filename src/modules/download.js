import { downloadFile } from './domElements.js';

export class DownloadManager {
    constructor(cameraManager) {
        this.cameraManager = cameraManager;
        this.setupDownloadButton();
    }

    setupDownloadButton() {
        if (downloadFile) {
            downloadFile.style.display = 'block';
            downloadFile.addEventListener('click', () => {
                this.downloadSVG();
            });
        }
    }

    downloadSVG() {
        try {
            const svg = document.getElementById('svg');
            const bodyPathElement = document.getElementById('bodyPath');

            if (!svg || !bodyPathElement) {
                console.error('SVG elements not found');
                return;
            }

            // Get the current path data
            const pathData = bodyPathElement.getAttribute('d');

            if (!pathData || pathData === '') {
                console.warn('No body outline to download');
                this.cameraManager.updateDebug('No body outline to download');

                // Flash the download button to indicate no content
                downloadFile.style.background = 'rgba(255, 0, 0, 0.7)';
                setTimeout(() => {
                    downloadFile.style.background = 'rgba(0, 0, 0, 0.7)';
                }, 500);
                return;
            }

            // Show download in progress
            this.cameraManager.updateDebug('Preparing download...');
            downloadFile.style.background = 'rgba(0, 255, 0, 0.7)';

            // Get the current stroke color from CSS variable
            const computedStyle = getComputedStyle(svg);
            const currentColor = computedStyle.getPropertyValue('--stroke-color').trim() || '#00ff00';

            // Create a clean SVG for download
            const svgContent = this.createDownloadableSVG(pathData, currentColor);

            // Create blob and trigger download
            const blob = new Blob([svgContent], { type: 'image/svg+xml' });
            const url = URL.createObjectURL(blob);

            // Create download link
            const link = document.createElement('a');
            link.href = url;
            link.download = `bodychalk-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.svg`;

            // Trigger download
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            // Clean up object URL
            URL.revokeObjectURL(url);

            this.cameraManager.updateDebug('SVG downloaded successfully');
            console.log('SVG downloaded:', link.download);

            // Reset button color
            setTimeout(() => {
                downloadFile.style.background = 'rgba(0, 0, 0, 0.7)';
            }, 1000);

        } catch (error) {
            console.error('Download failed:', error);
            this.cameraManager.updateDebug('Download failed');

            // Show error state
            downloadFile.style.background = 'rgba(255, 0, 0, 0.7)';
            setTimeout(() => {
                downloadFile.style.background = 'rgba(0, 0, 0, 0.7)';
            }, 1000);
        }
    }

    createDownloadableSVG(pathData, strokeColor = '#00ff00') {
        const width = this.cameraManager.videoWidth;
        const height = this.cameraManager.videoHeight;

        // Create timestamp for metadata
        const timestamp = new Date().toISOString();

        // Create enhanced SVG content
        const svgContent = `<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" 
     width="${width}" 
     height="${height}" 
     viewBox="0 0 ${width} ${height}">
  <defs>
    <style>
      .body-outline {
        stroke: ${strokeColor};
        stroke-width: 3;
        fill: none;
        stroke-linejoin: round;
        stroke-linecap: round;
        filter: drop-shadow(0 0 5px ${strokeColor});
      }
    </style>
  </defs>
  <metadata>
    <title>Body Chalk Outline</title>
    <description>Vector body outline generated by bodychalk</description>
    <created>${timestamp}</created>
    <camera>${this.cameraManager.currentFacingMode}</camera>
    <stroke-color>${strokeColor}</stroke-color>
  </metadata>
  <path d="${pathData}" class="body-outline"/>
</svg>`;

        return svgContent;
    }
}
