import { downloadFile } from './domElements.js';
import { SVGExporter } from './svgExporter.js';

export class DownloadManager {
    constructor(cameraManager) {
        this.cameraManager = cameraManager;
        this.setupDownloadButton();
    }

    setupDownloadButton() {
        if (downloadFile) {
            downloadFile.style.display = 'block';
            downloadFile.addEventListener('click', () => {
                this.downloadSVG();
            });
        }
    }

    downloadSVG() {
        try {
            // Use the consolidated SVG exporter
            const svgData = SVGExporter.createExportableSVG(this.cameraManager, {
                title: 'Body Chalk Outline',
                description: 'Vector body outline generated by bodychalk'
            });

            if (!svgData) {
                console.warn('No body outline to download');
                this.cameraManager.updateDebug('No body outline to download');

                // Flash the download button to indicate no content
                downloadFile.style.background = 'rgba(255, 0, 0, 0.7)';
                setTimeout(() => {
                    downloadFile.style.background = 'rgba(0, 0, 0, 0.7)';
                }, 500);
                return;
            }

            // Show download in progress
            this.cameraManager.updateDebug('Preparing download...');
            downloadFile.style.background = 'rgba(0, 255, 0, 0.7)';

            // Create blob and trigger download
            const blob = new Blob([svgData.svgContent], { type: 'image/svg+xml' });
            const url = URL.createObjectURL(blob);

            // Create download link
            const link = document.createElement('a');
            link.href = url;
            link.download = `bodychalk-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.svg`;

            // Trigger download
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            // Clean up object URL
            URL.revokeObjectURL(url);

            this.cameraManager.updateDebug('SVG downloaded successfully');
            console.log('SVG downloaded:', link.download);

            // Reset button color
            setTimeout(() => {
                downloadFile.style.background = 'rgba(0, 0, 0, 0.7)';
            }, 1000);

        } catch (error) {
            console.error('Download failed:', error);
            this.cameraManager.updateDebug('Download failed');

            // Show error state
            downloadFile.style.background = 'rgba(255, 0, 0, 0.7)';
            setTimeout(() => {
                downloadFile.style.background = 'rgba(0, 0, 0, 0.7)';
            }, 1000);
        }
    }
}
