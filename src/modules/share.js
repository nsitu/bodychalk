import { shareFile } from './domElements.js';
import { SVGExporter } from './svgExporter.js';

export class ShareManager {
    constructor(cameraManager) {
        this.cameraManager = cameraManager;
        this.setupShareButton();
        this.setupConfirmationDialog();
    }

    setupShareButton() {
        if (shareFile) {
            shareFile.style.display = 'block';
            shareFile.addEventListener('click', () => {
                this.showConfirmationDialog();
            });
        }
    }

    setupConfirmationDialog() {
        // Setup event listeners for confirmation dialog
        document.getElementById('shareConfirmCancel').addEventListener('click', () => {
            this.hideConfirmationDialog();
        });

        document.getElementById('shareConfirmOK').addEventListener('click', () => {
            this.hideConfirmationDialog();
            this.shareToWordPress();
        });

        // Close dialog when clicking outside
        document.getElementById('shareConfirmDialog').addEventListener('click', (e) => {
            if (e.target.id === 'shareConfirmDialog') {
                this.hideConfirmationDialog();
            }
        });

        // Setup event listeners for result dialog
        document.getElementById('shareResultClose').addEventListener('click', () => {
            this.hideResultDialog();
        });

        // Close result dialog when clicking outside
        document.getElementById('shareResultDialog').addEventListener('click', (e) => {
            if (e.target.id === 'shareResultDialog') {
                this.hideResultDialog();
            }
        });
    }

    showConfirmationDialog() {
        // Check if there's an outline to share
        const bodyPathElement = document.getElementById('bodyPath');
        const pathData = bodyPathElement?.getAttribute('d');

        if (!pathData || pathData === '') {
            this.showNoOutlineMessage();
            return;
        }

        // Capture SVG content immediately
        this.capturedSVGData = SVGExporter.createExportableSVG(this.cameraManager, {
            title: 'Body Outline from BodyChalk',
            description: 'Vector body outline generated by bodychalk app',
            source: 'bodychalk app'
        });

        if (!this.capturedSVGData) {
            this.showNoOutlineMessage();
            return;
        }

        // Show preview in dialog
        this.showSVGPreview(this.capturedSVGData.svgContent);

        const dialog = document.getElementById('shareConfirmDialog');
        if (dialog) {
            dialog.style.display = 'flex';
        }
    }

    hideConfirmationDialog() {
        const dialog = document.getElementById('shareConfirmDialog');
        if (dialog) {
            dialog.style.display = 'none';
        }
    }

    showResultDialog(success, message = '') {
        const dialog = document.getElementById('shareResultDialog');
        const content = document.getElementById('shareResultContent');

        if (success) {
            content.innerHTML = `
                <div class="success">
                    <div class="success-icon">✓</div>
                    <h3>Thanks for sharing!</h3>
                    <p>Your bodychalk has been successfully shared with the community.</p>
                    <p>Check it out on the <a href="https://artsforall.co/bodychalk" target="_blank">Arts for All community page</a>.</p>
                    <div style="display: flex; justify-content: center; margin-top: 2rem;">
                        <button id="shareResultContinue">Continue</button>
                    </div>
                </div>
            `;
        } else {
            content.innerHTML = `
                <div class="error">
                    <div class="error-icon">✗</div>
                    <h3>Sharing Failed</h3>
                    <p>We couldn't share your bodychalk at this time. Please try again later.</p>
                    ${message ? `<p style="color: #999; font-size: 0.9em;">Error: ${message}</p>` : ''}
                    <div style="display: flex; justify-content: center; margin-top: 2rem;">
                        <button id="shareResultContinue">Continue</button>
                    </div>
                </div>
            `;
        }

        dialog.style.display = 'flex';

        // Add event listener to the Continue button
        document.getElementById('shareResultContinue').addEventListener('click', () => {
            this.hideResultDialog();
        });
    }

    hideResultDialog() {
        const dialog = document.getElementById('shareResultDialog');
        if (dialog) {
            dialog.style.display = 'none';
        }
    }

    showNoOutlineMessage() {
        this.cameraManager.updateDebug('No body outline to share');

        // Flash the share button to indicate no content
        shareFile.style.background = 'rgba(255, 0, 0, 0.7)';
        setTimeout(() => {
            shareFile.style.background = 'rgba(0, 0, 0, 0.7)';
        }, 500);
    }

    async shareToWordPress() {
        try {
            // Use the previously captured SVG data
            if (!this.capturedSVGData) {
                throw new Error('No SVG data captured for sharing');
            }

            // Show sharing in progress
            this.cameraManager.updateDebug('Sharing to WordPress...');
            shareFile.style.background = 'rgba(255, 165, 0, 0.7)'; // Orange for in-progress

            // Prepare form data using captured data
            const formData = new FormData();

            // Create a file blob from the captured SVG content
            const blob = new Blob([this.capturedSVGData.svgContent], { type: 'image/svg+xml' });
            const filename = `bodychalk-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.svg`;

            // Add file to form data
            formData.append('file', blob, filename);
            formData.append('title', 'Body Outline from BodyChalk');
            formData.append('description', 'Vector body outline generated by bodychalk app');
            formData.append('camera_mode', this.capturedSVGData.cameraMode);
            formData.append('stroke_color', this.capturedSVGData.strokeColor);
            formData.append('timestamp', this.capturedSVGData.timestamp);

            // Make POST request to WordPress
            const response = await fetch('https://artsforall.co/wp-json/bodychalk/v1/upload-svg', {
                method: 'POST',
                body: formData,
                headers: {
                    // Don't set Content-Type header - let browser set it for FormData
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();

            if (result.success) {
                this.cameraManager.updateDebug('Successfully shared to WordPress!');
                shareFile.style.background = 'rgba(0, 255, 0, 0.7)'; // Green for success
                console.log('Share successful:', result);

                // Show success dialog
                this.showResultDialog(true);
            } else {
                throw new Error(result.message || 'Unknown error from server');
            }

        } catch (error) {
            console.error('Share failed:', error);
            this.cameraManager.updateDebug(`Share failed: ${error.message}`);
            shareFile.style.background = 'rgba(255, 0, 0, 0.7)'; // Red for error

            // Show failure dialog
            this.showResultDialog(false, error.message);
        } finally {
            // Reset button color after 2 seconds
            setTimeout(() => {
                shareFile.style.background = 'rgba(0, 0, 0, 0.7)';
            }, 2000);
        }
    }

    showSVGPreview(svgContent) {
        // Find or create preview container in the dialog
        let previewContainer = document.getElementById('svgPreviewContainer');
        previewContainer.innerHTML = svgContent
        // Create a scaled-down version for preview
        // const blob = new Blob([svgContent], { type: 'image/svg+xml' });
        // const url = URL.createObjectURL(blob); 
        // previewContainer.innerHTML = svgContent`
        //     <img src="${url}" style="width: 100%; height: 100%; object-fit: contain;" alt="SVG Preview" />
        // `; 
        // // Clean up the URL after a delay to prevent memory leaks
        // setTimeout(() => URL.revokeObjectURL(url), 5000);
    }
}
