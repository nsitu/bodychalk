import { shareFile } from './domElements.js';

export class ShareManager {
    constructor(cameraManager) {
        this.cameraManager = cameraManager;
        this.setupShareButton();
        this.setupConfirmationDialog();
    }

    setupShareButton() {
        if (shareFile) {
            shareFile.style.display = 'block';
            shareFile.addEventListener('click', () => {
                this.showConfirmationDialog();
            });
        }
    }

    setupConfirmationDialog() {


        // Setup event listeners
        document.getElementById('shareConfirmCancel').addEventListener('click', () => {
            this.hideConfirmationDialog();
        });

        document.getElementById('shareConfirmOK').addEventListener('click', () => {
            this.hideConfirmationDialog();
            this.shareToWordPress();
        });

        // Close dialog when clicking outside
        document.getElementById('shareConfirmDialog').addEventListener('click', (e) => {
            if (e.target.id === 'shareConfirmDialog') {
                this.hideConfirmationDialog();
            }
        });
    }

    showConfirmationDialog() {
        // Check if there's an outline to share
        const bodyPathElement = document.getElementById('bodyPath');
        const pathData = bodyPathElement?.getAttribute('d');

        if (!pathData || pathData === '') {
            this.showNoOutlineMessage();
            return;
        }

        const dialog = document.getElementById('shareConfirmDialog');
        if (dialog) {
            dialog.style.display = 'flex';
        }
    }

    hideConfirmationDialog() {
        const dialog = document.getElementById('shareConfirmDialog');
        if (dialog) {
            dialog.style.display = 'none';
        }
    }

    showNoOutlineMessage() {
        this.cameraManager.updateDebug('No body outline to share');

        // Flash the share button to indicate no content
        shareFile.style.background = 'rgba(255, 0, 0, 0.7)';
        setTimeout(() => {
            shareFile.style.background = 'rgba(0, 0, 0, 0.7)';
        }, 500);
    }

    async shareToWordPress() {
        try {
            const svg = document.getElementById('svg');
            const bodyPathElement = document.getElementById('bodyPath');

            if (!svg || !bodyPathElement) {
                throw new Error('SVG elements not found');
            }

            // Get the current path data
            const pathData = bodyPathElement.getAttribute('d');

            if (!pathData || pathData === '') {
                throw new Error('No body outline to share');
            }

            // Show sharing in progress
            this.cameraManager.updateDebug('Preparing to share...');
            shareFile.style.background = 'rgba(255, 165, 0, 0.7)'; // Orange for in-progress

            // Get the current stroke color from CSS variable
            const computedStyle = getComputedStyle(svg);
            const currentColor = computedStyle.getPropertyValue('--stroke-color').trim() || '#00ff00';

            // Create SVG content for sharing
            const svgContent = this.createShareableSVG(pathData, currentColor);

            // Prepare form data
            const formData = new FormData();

            // Create a file blob
            const blob = new Blob([svgContent], { type: 'image/svg+xml' });
            const filename = `bodychalk-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.svg`;

            // Add file to form data
            formData.append('file', blob, filename);
            formData.append('title', 'Body Outline from BodyChalk');
            formData.append('description', 'Vector body outline generated by bodychalk app');
            formData.append('camera_mode', this.cameraManager.currentFacingMode);
            formData.append('stroke_color', currentColor);
            formData.append('timestamp', new Date().toISOString());

            // Make POST request to WordPress
            const response = await fetch('https://artsforall.co/wp-json/bodychalk/v1/upload-svg', {
                method: 'POST',
                body: formData,
                headers: {
                    // Don't set Content-Type header - let browser set it for FormData
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();

            if (result.success) {
                this.cameraManager.updateDebug('Successfully shared to WordPress!');
                shareFile.style.background = 'rgba(0, 255, 0, 0.7)'; // Green for success
                console.log('Share successful:', result);
            } else {
                throw new Error(result.message || 'Unknown error from server');
            }

        } catch (error) {
            console.error('Share failed:', error);
            this.cameraManager.updateDebug(`Share failed: ${error.message}`);
            shareFile.style.background = 'rgba(255, 0, 0, 0.7)'; // Red for error
        } finally {
            // Reset button color after 2 seconds
            setTimeout(() => {
                shareFile.style.background = 'rgba(0, 0, 0, 0.7)';
            }, 2000);
        }
    }

    createShareableSVG(pathData, strokeColor = '#00ff00') {
        const width = this.cameraManager.videoWidth;
        const height = this.cameraManager.videoHeight;

        // Create timestamp for metadata
        const timestamp = new Date().toISOString();

        // Create enhanced SVG content for WordPress
        const svgContent = `<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" 
     width="${width}" 
     height="${height}" 
     viewBox="0 0 ${width} ${height}">
  <defs>
    <style>
      .body-outline {
        stroke: ${strokeColor};
        stroke-width: 3;
        fill: none;
        stroke-linejoin: round;
        stroke-linecap: round;
        filter: drop-shadow(0 0 5px ${strokeColor});
      }
    </style>
  </defs>
  <metadata>
    <title>Body Chalk Outline</title>
    <description>Vector body outline generated by bodychalk app</description>
    <created>${timestamp}</created>
    <camera>${this.cameraManager.currentFacingMode}</camera>
    <stroke-color>${strokeColor}</stroke-color>
    <source>bodychalk app</source>
  </metadata>
  <path d="${pathData}" class="body-outline"/>
</svg>`;

        return svgContent;
    }
}
